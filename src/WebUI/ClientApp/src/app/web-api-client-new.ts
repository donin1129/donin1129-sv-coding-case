//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class SearchEngineClient {
  private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
    this.http = http ? http : window as any;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
  }

  getDataFileUsingSearchEngine(searchString: string | null | undefined): Promise<DataFileDto> {
    let url_ = this.baseUrl + "/api/SearchEngine?";
    if (searchString !== undefined && searchString !== null)
      url_ += "SearchString=" + encodeURIComponent("" + searchString) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetDataFileUsingSearchEngine(_response);
    });
  }

  protected processGetDataFileUsingSearchEngine(response: Response): Promise<DataFileDto> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DataFileDto.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<DataFileDto>(null as any);
  }
}

export class DataFileDto implements IDataFileDto {
  buildings?: BuildingDto[] | undefined;
  groups?: GroupDto[] | undefined;
  locks?: LockDto[] | undefined;
  media?: MediaDto[] | undefined;

  constructor(data?: IDataFileDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data["buildings"])) {
        this.buildings = [] as any;
        for (let item of _data["buildings"])
          this.buildings!.push(BuildingDto.fromJS(item));
      }
      if (Array.isArray(_data["groups"])) {
        this.groups = [] as any;
        for (let item of _data["groups"])
          this.groups!.push(GroupDto.fromJS(item));
      }
      if (Array.isArray(_data["locks"])) {
        this.locks = [] as any;
        for (let item of _data["locks"])
          this.locks!.push(LockDto.fromJS(item));
      }
      if (Array.isArray(_data["media"])) {
        this.media = [] as any;
        for (let item of _data["media"])
          this.media!.push(MediaDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): DataFileDto {
    data = typeof data === 'object' ? data : {};
    let result = new DataFileDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.buildings)) {
      data["buildings"] = [];
      for (let item of this.buildings)
        data["buildings"].push(item.toJSON());
    }
    if (Array.isArray(this.groups)) {
      data["groups"] = [];
      for (let item of this.groups)
        data["groups"].push(item.toJSON());
    }
    if (Array.isArray(this.locks)) {
      data["locks"] = [];
      for (let item of this.locks)
        data["locks"].push(item.toJSON());
    }
    if (Array.isArray(this.media)) {
      data["media"] = [];
      for (let item of this.media)
        data["media"].push(item.toJSON());
    }
    return data;
  }
}

export interface IDataFileDto {
  buildings?: BuildingDto[] | undefined;
  groups?: GroupDto[] | undefined;
  locks?: LockDto[] | undefined;
  media?: MediaDto[] | undefined;
}

export class BuildingDto implements IBuildingDto {
  id?: string;
  description?: string | undefined;
  shortCut?: string | undefined;
  name?: string | undefined;

  constructor(data?: IBuildingDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.description = _data["description"];
      this.shortCut = _data["shortCut"];
      this.name = _data["name"];
    }
  }

  static fromJS(data: any): BuildingDto {
    data = typeof data === 'object' ? data : {};
    let result = new BuildingDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["description"] = this.description;
    data["shortCut"] = this.shortCut;
    data["name"] = this.name;
    return data;
  }
}

export interface IBuildingDto {
  id?: string;
  description?: string | undefined;
  shortCut?: string | undefined;
  name?: string | undefined;
}

export class GroupDto implements IGroupDto {
  id?: string;
  description?: string | undefined;
  name?: string | undefined;

  constructor(data?: IGroupDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.description = _data["description"];
      this.name = _data["name"];
    }
  }

  static fromJS(data: any): GroupDto {
    data = typeof data === 'object' ? data : {};
    let result = new GroupDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["description"] = this.description;
    data["name"] = this.name;
    return data;
  }
}

export interface IGroupDto {
  id?: string;
  description?: string | undefined;
  name?: string | undefined;
}

export class LockDto implements ILockDto {
  id?: string;
  description?: string | undefined;
  serialNumber?: string | undefined;
  buildingId?: string;
  type?: LockType;
  name?: string | undefined;
  floor?: string | undefined;
  roomNumber?: string | undefined;

  constructor(data?: ILockDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.description = _data["description"];
      this.serialNumber = _data["serialNumber"];
      this.buildingId = _data["buildingId"];
      this.type = _data["type"];
      this.name = _data["name"];
      this.floor = _data["floor"];
      this.roomNumber = _data["roomNumber"];
    }
  }

  static fromJS(data: any): LockDto {
    data = typeof data === 'object' ? data : {};
    let result = new LockDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["description"] = this.description;
    data["serialNumber"] = this.serialNumber;
    data["buildingId"] = this.buildingId;
    data["type"] = this.type;
    data["name"] = this.name;
    data["floor"] = this.floor;
    data["roomNumber"] = this.roomNumber;
    return data;
  }
}

export interface ILockDto {
  id?: string;
  description?: string | undefined;
  serialNumber?: string | undefined;
  buildingId?: string;
  type?: LockType;
  name?: string | undefined;
  floor?: string | undefined;
  roomNumber?: string | undefined;
}

export enum LockType {
  Cylinder = 0,
  SmartHandle = 1,
}

export class MediaDto implements IMediaDto {
  id?: string;
  description?: string | undefined;
  serialNumber?: string | undefined;
  groupId?: string;
  type?: MediaType;
  owner?: string | undefined;

  constructor(data?: IMediaDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.description = _data["description"];
      this.serialNumber = _data["serialNumber"];
      this.groupId = _data["groupId"];
      this.type = _data["type"];
      this.owner = _data["owner"];
    }
  }

  static fromJS(data: any): MediaDto {
    data = typeof data === 'object' ? data : {};
    let result = new MediaDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["description"] = this.description;
    data["serialNumber"] = this.serialNumber;
    data["groupId"] = this.groupId;
    data["type"] = this.type;
    data["owner"] = this.owner;
    return data;
  }
}

export interface IMediaDto {
  id?: string;
  description?: string | undefined;
  serialNumber?: string | undefined;
  groupId?: string;
  type?: MediaType;
  owner?: string | undefined;
}

export enum MediaType {
  Card = 0,
  Transponder = 1,
  TransponderWithCardInlay = 2,
}

export class ApiException extends Error {
  message: string;
  status: number;
  response: string;
  headers: { [key: string]: any; };
  result: any;

  constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
  if (result !== null && result !== undefined)
    throw result;
  else
    throw new ApiException(message, status, response, headers, null);
}
